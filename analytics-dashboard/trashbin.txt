

  // session or github login
  const {data:session}=useSession();
  if(session){
    return<>
    Signin as {session.user?.email} <br/>
    <button onClick={()=> signOut()}>SignOut</button></>
  }
 
 {/* GitHub Sign-In Button */}
        <div className="text-center">
          <button
            onClick={() => signIn("github")}
            className="w-full flex justify-center py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-all duration-300"
          >
            Sign in with GitHub
          </button>
        </div>
 

import { signIn } from "next-auth/react";
 
 // session or github login
  const {data:session}=useSession();
  if(session){
    return<>
    Signin as {session.user?.email} <br/>
    <button onClick={()=> signOut()}>SignOut</button></>
  }
 

import {SessionProvider} from 'next-auth/react'
 

   </SessionProvider>
 

   <SessionProvider session={pageProps.session}>
 

import {SessionProvider} from 'next-auth/react'
 

   </SessionProvider>
 

   <SessionProvider session={pageProps.session}>
 

import { GithubProvider } from 'next-auth/providers/GithubProvider';
 
import { GithubProvider } from 'ne';
 

import GoogleProvider from "next-auth/providers/git";
 
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
  ],
 
useSession,
 

  const session=useSession();
 
if(session.data === null){
    return <button onClick={signIn}>Login</button>
  }
 

    </SessionWrapper>
 

    <SessionWrapper>
 

import SessionWrapper from "../component/SessionWrapper"
 
6836540db672d3e4ee03e06a9a85b751028a33fa
 
both GET and POST
export { handler as GET, handler as POST };

// Export the handler as the default export
export default handler;
 
 process.env.GITHUB_SECRET
 
process.env.GITHUB_ID,
 
process.env.GITHUB_SECRET!
 
process.env.GITHUB_ID!
 
ea80d786a094b559c2991a156147dc0ec2c35a40
 
Ov23liCPePeZYytYJDGZ
 

export {handler as GET,handler as POST}
 

import { useDispatch, useSelector } from "react-redux";
import { checkUserAsync, selectError, selectLoggedInUser, createUserAsync } from "../store/auth/authSlice";
import { useForm } from "react-hook-form";
import { useRouter } from "next/router";
import { useState } from "react";
import { signIn } from "next-auth/react";

export default function () {
  const dispatch = useDispatch();
  const error = useSelector(selectError);
  const user = useSelector(selectLoggedInUser);
  
  const { register, handleSubmit, formState: { errors } } = useForm();
  
  const router = useRouter();
  
  const [isSignUp, setIsSignUp] = useState(false);  // State to toggle between login and signup

  // Redirect to home if the user is already logged in
  if (user) {
    router.push("/");  
    return null;  
  }

  const onSubmit = (data) => {
    if (isSignUp) {
      // Handle signup
      dispatch(createUserAsync(data))
        .unwrap()
        .then(() => {
          router.push("/"); // Redirect to home after successful signup
        })
        .catch((err) => {
          console.error("Signup failed:", err);
        });
    } else {
      // Handle login
      dispatch(checkUserAsync({ email: data.email, password: data.password }));
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-2xl transform transition-all duration-500 hover:scale-105">
        <div className="text-center">
          <h2 className="text-3xl font-extrabold text-gray-900">{isSignUp ? "Create an Account" : "Welcome Back"}</h2>
          <p className="mt-2 text-sm text-gray-600">
            {isSignUp ? "Join us to get started" : "Sign in to your account"}
          </p>
        </div>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700">
              Email address
            </label>
            <div className="mt-1">
              <input
                id="email"
                type="email"
                {...register("email", {
                  required: "Email is required",
                  pattern: {
                    value: /\b[\w\.-]+@[\w\.-]+\.\w{2,4}\b/gi,
                    message: "Email is not valid",
                  },
                })}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-300"
                placeholder="Enter your email"
              />
              {errors.email && (
                <p className="mt-2 text-sm text-red-600">{errors.email.message}</p>
              )}
            </div>
          </div>

          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700">
              Password
            </label>
            <div className="mt-1">
              <input
                id="password"
                type="password"
                {...register("password", {
                  required: "Password is required",
                  minLength: isSignUp ? {
                    value: 6,
                    message: "Password must be at least 6 characters"
                  } : undefined
                })}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-300"
                placeholder="Enter your password"
              />
              {errors.password && (
                <p className="mt-2 text-sm text-red-600">{errors.password.message}</p>
              )}
            </div>
          </div>

          {error && (
            <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
              <p className="text-sm text-red-600">{error.message}</p>
            </div>
          )}

          <div>
            <button
              type="submit"
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-300"
            >
              {isSignUp ? "Sign Up" : "Sign In"}
            </button>
          </div>
        </form>

        <div className="text-center">
          <p className="text-sm text-gray-600">
            {isSignUp ? "Already have an account?" : "Don't have an account?"}{" "}
            <a
              onClick={() => setIsSignUp(!isSignUp)}  // Toggle between login and signup
              className="font-medium text-indigo-600 hover:text-indigo-500 cursor-pointer"
            >
              {isSignUp ? "Log in" : "Sign up"}
            </a>
          </p>
        </div>

        {/* GitHub Sign-In Button */}
        <div className="text-center">
          <button
            onClick={() => signIn("github")}
            className="w-full flex justify-center py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-all duration-300"
          >
            Sign in with GitHub
          </button>
        </div>
      </div>
    </div>
  );
}
 
../store/auth/authSlice
 
../store/auth/authSlice
 

import {SessionProvider} from "next-auth/react";
 
// next.config.ts
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  reactStrictMode: true, // Optional, enables additional checks and warnings
  swcMinify:true,
  images:{
    remotePatterns:[
      {
        protocol: "https",
        hostname: "**",
      }
    ]
  }
};

export default nextConfig;

 
import { GithubProvider } from 'ne';
 
GOOGLE_CLIENT_SECRET
 
GOOGLE_CLIENT_SECRET
 
GOOGLE_CLIENT_ID
 

import GoogleProvider from "next-auth/providers/google";
 

import GoogleProvider from "next-auth/providers/google";
 
GoogleProvider
 
bg-blue-900
 
from-blue-50 to-purple-50
 
from-blue-50 to-purple-50
 
from-blue-50 to-purple-50
 
 <div>
      <form onSubmit={handleSubmit(onSubmit)}>
        <input
          type="email"
          {...register("email", { required: "Email is required" })}
        />
        {errors.email && <p>{errors.email.message}</p>}

        <input
          type="password"
          {...register("password", { required: "Password is required" })}
        />
        {errors.password && <p>{errors.password.message}</p>}

        {error && <p>{error.message}</p>}

        <button type="submit">Login</button>
      </form>
    </div>
 

import { checkUserAsync } from "../store/auth/authApi";
 
../store/auth/authSlice
 

import { signOutAsync, selectLoggedInUser } from "../../store/auth/authSlice"; 
 
../../store/auth/authSlice
 

                < className="text-gray-800 hover:text-purple-600 transition-colors duration-300 ml-4">
 
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { checkUser, createUser, signOut } from "./authApi";

const initialState = {
  loggedInUser: null,
  status: "idle",
  error: null,
};

export const createUserAsync = createAsyncThunk(
  "auth/createUser",
  async (userData) => {
    const response = await createUser(userData);
    return response.data;
  }
);

export const checkUserAsync = createAsyncThunk(
  "auth/checkUser",
  async (loginInfo) => {
    const response = await checkUser(loginInfo);
    return response.data;
  }
);

export const signOutAsync = createAsyncThunk(
  "auth/signOut",
  async () => {
    const response = await signOut();
    return response.data;
  }
);

const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(createUserAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(createUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.loggedInUser = action.payload;
      })
      .addCase(createUserAsync.rejected, (state, action) => {
        state.status = "idle";
        state.error = action.error;
      })
      .addCase(checkUserAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(checkUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.loggedInUser = action.payload;
      })
      .addCase(checkUserAsync.rejected, (state, action) => {
        state.status = "idle";
        state.error = action.error;
      })
      .addCase(signOutAsync.fulfilled, (state) => {
        state.loggedInUser = null;
      });
  },
});

export const selectLoggedInUser = (state) => state.auth.loggedInUser;
export const selectError = (state) => state.auth.error;

export default authSlice.reducer;

 
../store/auth/authSlice
 

                <a className="text-gray-800 hover:text-purple-600 transition-colors duration-300 ml-4">
 

                </a>
 

                </a>
 
<a className="text-gray-800 hover:text-purple-600 transition-colors duration-300 ml-4">
 
../store/auth/authSlice
 
import { useDispatch, useSelector } from "react-redux";
import { checkUserAsync, selectError, selectLoggedInUser } from "../store/auth/authSlice";
import { useForm } from "react-hook-form";
import { Navigate } from "react-router-dom";

export default function Login() {
  const dispatch = useDispatch();
  const error = useSelector(selectError);
  const user = useSelector(selectLoggedInUser);
  
  const { register, handleSubmit, formState: { errors } } = useForm();

  if (user) return <Navigate to="/" />;

  const onSubmit = (data) => {
    dispatch(checkUserAsync({ email: data.email, password: data.password }));
  };

  return (
    <div>
      <form onSubmit={handleSubmit(onSubmit)}>
        <input
          type="email"
          {...register("email", { required: "Email is required" })}
        />
        {errors.email && <p>{errors.email.message}</p>}

        <input
          type="password"
          {...register("password", { required: "Password is required" })}
        />
        {errors.password && <p>{errors.password.message}</p>}

        {error && <p>{error.message}</p>}

        <button type="submit">Login</button>
      </form>
    </div>
  );
}

 
import { useSelector } from "react-redux";
import { selectLoggedInUser } from "../../store/auth/authSlice";
import { Navigate } from "react-router-dom";

export default function Protected({ children }) {
  const user = useSelector(selectLoggedInUser);

  if (!user) {
    return <Navigate to="/login" />;
  }

  return children;
}

 
../store/auth/authSlice
 
./authApi
 
./authApi
 
../features/auth/authSlice
 
 <div className="flex items-center">
            <img
              src="https://via.placeholder.com/40"
              alt="User"
              className="w-10 h-10 rounded-full"
            />
          </div>
 
  <div className="flex items-center">
            <img
              src="https://via.placeholder.com/40"
              alt="User"
              className="w-10 h-10 rounded-full"
            />
          </div>
 
, useEffect 
 

import Search from "./components/Search";
import Stock from "./components/Stock";
 
</div>
 
 <div className="w-full bg-white rounded-lg shadow-lg p-6 mb-8">
          <h2 className="text-2xl font-bold text-blue-800 mb-4 text-center">
            Weather Forecast
          </h2>
          <div className="w-full h-96">
            <Line data={chartData} options={chartOptions} />
          </div>
        </div>
 
  const [chartData, setChartData] = useState({
    labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
    datasets: [
      {
        label: "Temperature (°C)",
        data: [22, 25, 27, 24, 23, 26, 28], // Sample temperature data
        borderColor: "rgba(75, 192, 192, 1)",
        backgroundColor: "rgba(75, 192, 192, 0.2)",
        borderWidth: 2,
      },
    ],
  });

  const chartOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: "top",
      },
      title: {
        display: true,
        text: "7 Days Temperature Forecast",
      },
    },
  };
 
{/* Centered Cards */}
      <div className="flex-1 flex items-center justify-center p-8">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {/* Weather Card */}
          <div className="m bg-gray-100 p-6">
            <div className="w-full max-w-4xl bg-white rounded-lg shadow-lg p-6">
              {/* Chart */}
              <div className="w-full h-auto">
                <Line data={chartData} options={chartOptions} />
              </div>
            </div>
          </div>

          {/* News Card */}
          <Link href="/news">
            <div className="bg-white/90 backdrop-blur-md p-8 rounded-2xl shadow-lg cursor-pointer hover:scale-105 hover:shadow-2xl transition-all duration-500 border border-white/20">
              <h2 className="text-3xl font-bold mb-4 text-gray-800 flex items-center">
                <svg
                  className="w-8 h-8 mr-2 text-purple-500"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"
                  ></path>
                </svg>
                News
              </h2>
              <p className="text-gray-600 mb-4">
                Stay updated with the latest news.
              </p>
              {/* News Image */}
              <div className="w-full h-40 bg-gray-100 rounded-lg flex items-center justify-center overflow-hidden">
                <img
                  src="images/news.png" // Replace with your image path
                  alt="News"
                  className="w-full h-full object-cover"
                  onError={(e) => {
                    e.target.style.display = "none"; // Hide the image if it fails to load
                  }}
                />
              </div>
            </div>
          </Link>

          <Link href="/stockMarket">
            <div className="bg-white/90 backdrop-blur-md p-8 rounded-2xl shadow-lg cursor-pointer hover:scale-105 hover:shadow-2xl transition-all duration-500 border border-white/20">
              <h2 className="text-3xl font-bold mb-4 text-gray-800 flex items-center">
                <svg
                  className="w-8 h-8 mr-2 text-purple-500"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"
                  ></path>
                </svg>
                Stock Market
              </h2>
              <p className="text-gray-600 mb-4">
                Stay updated with the latest news.
              </p>
              {/* News Image */}
              <div className="w-full h-40 bg-gray-100 rounded-lg flex items-center justify-center overflow-hidden">
                <img
                  src="images/news.png" // Replace with your image path
                  alt="News"
                  className="w-full h-full object-cover"
                  onError={(e) => {
                    e.target.style.display = "none"; // Hide the image if it fails to load
                  }}
                />
              </div>
            </div>
          </Link>

          {/*  */}
        </div>
      </div>
 


        {/* 7 Days Forecast Button */}
        <div className="mt-6 text-center">
          <button
            className="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition duration-300"
            onClick={() => alert("7 Days Forecast Button Clicked!")}
          >
            View 7 Days Forecast
          </button>
        </div>
 
 const [chartData, setChartData] = useState({
    labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
    datasets: [
      {
        label: "Temperature (°C)",
        data: [22, 25, 27, 24, 23, 26, 28], // Sample temperature data
        borderColor: "rgba(75, 192, 192, 1)",
        backgroundColor: "rgba(75, 192, 192, 0.2)",
        borderWidth: 2,
      },
    ],
  });
 
 <Link href="/weather">
            <div className="bg-white/90 backdrop-blur-md p-8 rounded-2xl shadow-lg cursor-pointer hover:scale-105 hover:shadow-2xl transition-all duration-500 border border-white/20">
              <h2 className="text-3xl font-bold mb-4 text-gray-800 flex items-center">
                <svg
                  className="w-8 h-8 mr-2 text-blue-500"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
                  ></path>
                </svg>
                Weather
              </h2>
              <p className="text-gray-600 mb-4">
                Check the latest weather updates.
              </p>
              {/* Weather Graph */}
              <div className="w-full h-40 bg-gray-100 rounded-lg flex items-center justify-center overflow-hidden">
                <img
                  src="images/weather.png" // Replace with your image path
                  alt="Weather Graph"
                  className="w-full h-full object-cover"
                  onError={(e) => {
                    e.target.style.display = "none"; // Hide the image if it fails to load
                  }}
                />
              </div>
            </div>
          </L
 
2NFJLAL5U3N9YXBF
 
https://www.alphavantage.co/query
 
3OEGOSZHUD19I04J
 
min-h-screen
 

</div>
 

<div>
 

    <div className="min-h-screen bg-gray-100">
 
min-h-screen
 
News
 
../services/alphaVantage
 
./components/Stock
 
./components/Search
 
../services/alphaVantage
 
../services/alphaVantage
 
../components/Stock
 
../components/Search
 
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface AuthState {
  isAuthenticated: boolean;
  user: null | { email: string };
}

const initialState: AuthState = {
  isAuthenticated: false,
  user: null,
};

const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    login(state, action: PayloadAction<{ email: string }>) {
      state.isAuthenticated = true;
      state.user = action.payload;
    },
    logout(state) {
      state.isAuthenticated = false;
      state.user = null;
    },
  },
});

export const { login, logout } = authSlice.actions;
export default authSlice.reducer;
 
./slices/authSlice
 
../utils/auth
 
./components/Layout
 

import store from '../store/store'; // Import the Redux store
 

import { useRouter } from "next/router";
import { useSelector } from "react-redux";
 
const user = useSelector((state: RootState) => state.auth.user);
  const router = useRouter();

  if (!user) {
    router.push('/login'); // Redirect to login page if not authenticated
    return null;
  }
 
../components/Layout
 
../store/authSlice
 
../store/authSlice
 
../store/authSlice
 
// pages/_app.tsx
import { AppProps } from 'next/app';
import Layout from './components/Layout';
import '../styles/globals.css'; // Optional: Add your global styles here

function MyApp({ Component, pageProps }: AppProps) {
  return (
    <Layout>
      <Component {...pageProps} />
    </Layout>
  );
}

export default MyApp;

 
    <div className="bg-gray-300 p-8 rounded-lg">
      <h2 className="text-2x1 font-bold mb-4">Wind Speed</h2>
      <div className="flex items-center justify-center">
        <FaWind className="mr-2" />
        <p className="text-lg">{windSpeed}m/s</p>
      </div>
    </div>
 
    <div className="bg-gray-300 p-8 rounded-lg">
      <h2 className="text-2x1 font-bold mb-4">Wind Speed</h2>
      <div className="flex items-center justify-center">
        <FaWind className="mr-2" />
        <p className="text-lg">{windSpeed}m/s</p>
      </div>
    </div>
 
 <div className="bg-gray-300 p-8 rounded-lg mb-2">
      <h2 className="text-2xl font-bold mb-4">Visibility</h2>
      <p className="text-lg mb-2">Current Visibility:{visibility} meters</p>
      <p className="text-lg">{visibilityDescription}</p>
    </div>
 
    <div className="bg-gray-300 p-8 rounded  mb-4">
      <h2 className="text-2x1 font-bold mb-4">Sunrise and Sunset</h2>{" "}
      <p className="text-1g mb-2">
        Sunrise: {moment.unix(sunrise).format("HH:mm")}
      </p>
      <p className="text-lg">Sunset: {moment.unix(sunset).format("HH:mm")}</p>{" "}
    </div>
 
    <div className="bg-gray-300 p-8 rounded-lg mb-3">
      <h2 className="text-2xl font-bold mb-4">Humadity</h2>
      <p className="text-xl mb-2 font-bold">{humadity}%</p>
      <p className="text-lg">{humadityDescription}</p>
    </div>
 
    <div className="bg-gray-300 p-8 rounded-lg mb-3">
      <h2 className="text-2xl font-bold mb-4">Humadity</h2>
      <p className="text-xl mb-2 font-bold">{humadity}%</p>
      <p className="text-lg">{humadityDescription}</p>
    </div>
 
    <div className="bg-gray-900 p-8 rounded-lg mb-8">
      <h2 className="text-2xl font-bold mb-4">Hourly Weather</h2>
      <canvas ref={chartRef} width="400" height="200"></canvas>
    </div>
 
    <div className="bg-gray-900 p-8 rounded-lg mb-8">
      <h2 className="text-2xl font-bold mb-4">5-DAY Forecast Graph</h2>
      <canvas ref={chartRef} width="400" height="200"></canvas>
    </div>
 
 <div className="bg-gray-300 p-8 rounded-lg mb-3">
      <h2 className="text-2xl font-bold mb-4">Feels Like</h2>
      <p className="text-xl mb-2 font-bold">{feelsLikeTemperature}</p>
      <p className="text-lg">{description}</p>
    </div>
 
804b5ac5eb154a81ad4dc4b10ada6b7f
 
// "use client";
// // pages/news.tsx
// import React from "react";
// import Header from "../components/Header";
// import Navbar from "../components/Navbar";
// import TopHeadlines from "../components/TopHeadlines";
// const NewsApp = () => {
//   return (
//     <div>
//       <main className="px-2 md:px-20">
//         <Header />
//         <Navbar />
//         <section className="flex justify-between">
//           <main className="mt-4">
//             <TopHeadlines />
//           </main>
//         </section>
//       </main>
//     </div>
//   );
// };

// export default NewsApp;

// "use client";
// import React from "react";
// import { useState } from "react";
// import { useEffect } from "react";
// import Head from "next/head";
// import Image from "next/image";
// import Link from "next/link";
// // import { error } from "console";
// // 
// const newsApi = "804b5ac5eb154a81ad4dc4b10ada6b7f";
// const newsApiUrl = `https://newsapi.org/v2/top-headlines?country=us&apiKey=${newsApi}`;

// Craete a custom component
// const NewsCard = ({ article }) => {
//   return (
//     <div>
//       <Image
//         src={article.urlToImage || "./"}
//         alt={article.title}
//         width={250}
//         height={250}
//         className="w-full h-64 object-fill"
//         unoptimized={true}
//       />
//       <h3 className="text-xl font-semibold mt-4 mx-4">{article.title}</h3>
//       <p className="text-gray-500">{article.description}</p>
//       <p className="text-gray-500">{article.content}</p>
//     </div>
//   );
// };

// // navbar
// // const Navbar = ({ category, setCategory }) => {
// //   return (
// //     <div className="flex flex-wrap justify-center items-center gap-4 my-8">
// //       {category.map((cat) => (
// //         <button
// //           key={cat}
// //           className={`${
// //             category === cat
// //               ? "bg-blue-500 text-white"
// //               : "bg-gray-200 text-gray-800 hover:bg-gray-300 "
// //           } px-4 py-2 rounded-md`}
// //           onClick={() => setCategory(cat)}
// //         >
// //           {cat}
// //         </button>
// //       ))}
// //     </div>
// //   );
// // };

// const Navbar = ({ categories, setCategory }) => {
//   return (
//     <div className="flex flex-wrap justify-center items-center gap-4 my-8">
//       {categories.map((cat) => (
//         <button
//           key={cat}
//           className={`${
//             cat === setCategory // Fix comparison here
//               ? "bg-blue-500 text-white"
//               : "bg-gray-200 text-gray-800 hover:bg-gray-300 "
//           } px-4 py-2 rounded-md`}
//           onClick={() => setCategory(cat)}
//         >
//           {cat}
//         </button>
//       ))}
//     </div>
//   );
// };

// // create the main page
// // const Page = () => {
// //   const [news, setNews] = useState([]);
// //   const [loading, setLoading] = useState(true);
// //   const [category, setCategory] = useState("all");

// //   useEffect(() => {
// //     const query = category === "all" ? "" : `&category=${category}`;
// //     fetch(newsApiUrl + query)
// //       .then((response) => response.json())
// //       .then((data) => {
// //         setNews(data.articles || []);
// //         setLoading(false);
// //       })
// //       .catch((error) => {
// //         console.error(error);
// //         setLoading(false);
// //       });
// //   }, [category]);
// //   return (
// //     <>
// //       <Head>
// //         <title>News App</title>
// //         <meta
// //           name="description"
// //           content="A news app built with nextjs and taiwlind css"
// //         />
// //         <link rel="icon" href="/favicon.ico" />
// //       </Head>

// //       <main>
// //         <h1>News app</h1>
// //         <Navbar category={category} setCategory={setCategory} />
// //         <div>
// //           {loading ? (
// //             <p>Loading...</p>
// //           ) : news && news.length > 0 ? (
// //             news.map((article) => (
// //               <Link href={article.url} key={article.url}>
// //                 <NewsCard article={article} />
// //               </Link>
// //             ))
// //           ) : (
// //             <p>No news found</p>
// //           )}
// //         </div>
// //       </main>
// //     </>
// //   );
// // };

// const Page = () => {
//   const [news, setNews] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [category, setCategory] = useState("all");
//   const categories = ["all", "business", "sports", "technology"]; // Categories array

//   useEffect(() => {
//     const query = category === "all" ? "" : `&category=${category}`;
//     fetch(newsApiUrl + query)
//       .then((response) => response.json())
//       .then((data) => {
//         setNews(data.articles || []);
//         setLoading(false);
//       })
//       .catch((error) => {
//         console.error(error);
//         setLoading(false);
//       });
//   }, [category]);

//   return (
//     <>
//       <Head>
//         <title>News App</title>
//         <meta
//           name="description"
//           content="A news app built with nextjs and taiwlind css"
//         />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>

//       <main>
//         <h1>News app</h1>
//         <Navbar categories={categories} setCategory={setCategory} /> {/* Pass categories as array */}
//         <div>
//           {loading ? (
//             <p>Loading...</p>
//           ) : news && news.length > 0 ? (
//             news.map((article) => (
//               <Link href={article.url} key={article.url}>
//                 <NewsCard article={article} />
//               </Link>
//             ))
//           ) : (
//             <p>No news found</p>
//           )}
//         </div>
//       </main>
//     </>
//   );
// };

// export default Page;
// ;



// "use client";
// import React, { useState, useEffect } from "react";
// import Head from "next/head";
// import Image from "next/image";
// import Link from "next/link";

// // News API Configuration
// const newsApi = "804b5ac5eb154a81ad4dc4b10ada6b7f";
// const newsApiUrl = `https://newsapi.org/v2/top-headlines?country=us&apiKey=${newsApi}`;

// // NewsCard Component
// const NewsCard = ({ article }) => {
//   return (
//     <div className="bg-white shadow-lg rounded-lg overflow-hidden hover:shadow-xl transition-shadow duration-300">
//       <Image
//         src={article.urlToImage || "/default-image.jpg"}
//         alt={article.title}
//         width={400}
//         height={250}
//         className="w-full h-48 object-cover"
//         unoptimized={true}
//       />
//       <div className="p-4">
//         <h3 className="text-xl font-semibold text-gray-800 truncate">{article.title}</h3>
//         <p className="text-gray-600 text-sm mt-2">{article.description}</p>
//         <p className="text-gray-500 text-xs mt-2 line-clamp-3">{article.content}</p>
//       </div>
//     </div>
//   );
// };

// // Navbar Component
// const Navbar = ({ categories, setCategory }) => {
//   return (
//     <div className="flex flex-wrap justify-center items-center gap-4 my-8">
//       {categories.map((cat) => (
//         <button
//           key={cat}
//           className={`${
//             cat === setCategory
//               ? "bg-blue-500 text-white"
//               : "bg-gray-200 text-gray-800 hover:bg-gray-300"
//           } px-4 py-2 rounded-md text-sm font-medium transition-all duration-300`}
//           onClick={() => setCategory(cat)}
//         >
//           {cat}
//         </button>
//       ))}
//     </div>
//   );
// };

// // Main Page Component
// const Page = () => {
//   const [news, setNews] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [category, setCategory] = useState("all");
//   const categories = ["all", "business", "sports", "technology"]; // Categories array

//   useEffect(() => {
//     const query = category === "all" ? "" : `&category=${category}`;
//     fetch(newsApiUrl + query)
//       .then((response) => response.json())
//       .then((data) => {
//         setNews(data.articles || []);
//         setLoading(false);
//       })
//       .catch((error) => {
//         console.error(error);
//         setLoading(false);
//       });
//   }, [category]);

//   return (
//     <>
//       <Head>
//         <title>News App</title>
//         <meta name="description" content="A news app built with Next.js and Tailwind CSS" />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>

//       <main className="max-w-screen-lg mx-auto p-4">
//         <h1 className="text-3xl font-bold text-center my-6">News App</h1>
//         <Navbar categories={categories} setCategory={setCategory} />
        
//         <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
//           {loading ? (
//             <p className="col-span-full text-center text-xl">Loading...</p>
//           ) : news && news.length > 0 ? (
//             news.map((article) => (
//               <Link href={article.url} key={article.url}>
//                   <NewsCard article={article} />
//               </Link>
//             ))
//           ) : (
//             <p className="col-span-full text-center text-xl">No news found</p>
//           )}
//         </div>
//       </main>
//     </>
//   );
// };

// export default Page;

 
// "use client";
// // pages/news.tsx
// import React from "react";
// import Header from "../components/Header";
// import Navbar from "../components/Navbar";
// import TopHeadlines from "../components/TopHeadlines";
// const NewsApp = () => {
//   return (
//     <div>
//       <main className="px-2 md:px-20">
//         <Header />
//         <Navbar />
//         <section className="flex justify-between">
//           <main className="mt-4">
//             <TopHeadlines />
//           </main>
//         </section>
//       </main>
//     </div>
//   );
// };

// export default NewsApp;

// "use client";
// import React from "react";
// import { useState } from "react";
// import { useEffect } from "react";
// import Head from "next/head";
// import Image from "next/image";
// import Link from "next/link";
// // import { error } from "console";
// // 
// const newsApi = "804b5ac5eb154a81ad4dc4b10ada6b7f";
// const newsApiUrl = `https://newsapi.org/v2/top-headlines?country=us&apiKey=${newsApi}`;

// Craete a custom component
// const NewsCard = ({ article }) => {
//   return (
//     <div>
//       <Image
//         src={article.urlToImage || "./"}
//         alt={article.title}
//         width={250}
//         height={250}
//         className="w-full h-64 object-fill"
//         unoptimized={true}
//       />
//       <h3 className="text-xl font-semibold mt-4 mx-4">{article.title}</h3>
//       <p className="text-gray-500">{article.description}</p>
//       <p className="text-gray-500">{article.content}</p>
//     </div>
//   );
// };

// // navbar
// // const Navbar = ({ category, setCategory }) => {
// //   return (
// //     <div className="flex flex-wrap justify-center items-center gap-4 my-8">
// //       {category.map((cat) => (
// //         <button
// //           key={cat}
// //           className={`${
// //             category === cat
// //               ? "bg-blue-500 text-white"
// //               : "bg-gray-200 text-gray-800 hover:bg-gray-300 "
// //           } px-4 py-2 rounded-md`}
// //           onClick={() => setCategory(cat)}
// //         >
// //           {cat}
// //         </button>
// //       ))}
// //     </div>
// //   );
// // };

// const Navbar = ({ categories, setCategory }) => {
//   return (
//     <div className="flex flex-wrap justify-center items-center gap-4 my-8">
//       {categories.map((cat) => (
//         <button
//           key={cat}
//           className={`${
//             cat === setCategory // Fix comparison here
//               ? "bg-blue-500 text-white"
//               : "bg-gray-200 text-gray-800 hover:bg-gray-300 "
//           } px-4 py-2 rounded-md`}
//           onClick={() => setCategory(cat)}
//         >
//           {cat}
//         </button>
//       ))}
//     </div>
//   );
// };

// // create the main page
// // const Page = () => {
// //   const [news, setNews] = useState([]);
// //   const [loading, setLoading] = useState(true);
// //   const [category, setCategory] = useState("all");

// //   useEffect(() => {
// //     const query = category === "all" ? "" : `&category=${category}`;
// //     fetch(newsApiUrl + query)
// //       .then((response) => response.json())
// //       .then((data) => {
// //         setNews(data.articles || []);
// //         setLoading(false);
// //       })
// //       .catch((error) => {
// //         console.error(error);
// //         setLoading(false);
// //       });
// //   }, [category]);
// //   return (
// //     <>
// //       <Head>
// //         <title>News App</title>
// //         <meta
// //           name="description"
// //           content="A news app built with nextjs and taiwlind css"
// //         />
// //         <link rel="icon" href="/favicon.ico" />
// //       </Head>

// //       <main>
// //         <h1>News app</h1>
// //         <Navbar category={category} setCategory={setCategory} />
// //         <div>
// //           {loading ? (
// //             <p>Loading...</p>
// //           ) : news && news.length > 0 ? (
// //             news.map((article) => (
// //               <Link href={article.url} key={article.url}>
// //                 <NewsCard article={article} />
// //               </Link>
// //             ))
// //           ) : (
// //             <p>No news found</p>
// //           )}
// //         </div>
// //       </main>
// //     </>
// //   );
// // };

// const Page = () => {
//   const [news, setNews] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [category, setCategory] = useState("all");
//   const categories = ["all", "business", "sports", "technology"]; // Categories array

//   useEffect(() => {
//     const query = category === "all" ? "" : `&category=${category}`;
//     fetch(newsApiUrl + query)
//       .then((response) => response.json())
//       .then((data) => {
//         setNews(data.articles || []);
//         setLoading(false);
//       })
//       .catch((error) => {
//         console.error(error);
//         setLoading(false);
//       });
//   }, [category]);

//   return (
//     <>
//       <Head>
//         <title>News App</title>
//         <meta
//           name="description"
//           content="A news app built with nextjs and taiwlind css"
//         />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>

//       <main>
//         <h1>News app</h1>
//         <Navbar categories={categories} setCategory={setCategory} /> {/* Pass categories as array */}
//         <div>
//           {loading ? (
//             <p>Loading...</p>
//           ) : news && news.length > 0 ? (
//             news.map((article) => (
//               <Link href={article.url} key={article.url}>
//                 <NewsCard article={article} />
//               </Link>
//             ))
//           ) : (
//             <p>No news found</p>
//           )}
//         </div>
//       </main>
//     </>
//   );
// };

// export default Page;
// ;



// "use client";
// import React, { useState, useEffect } from "react";
// import Head from "next/head";
// import Image from "next/image";
// import Link from "next/link";

// // News API Configuration
// const newsApi = "804b5ac5eb154a81ad4dc4b10ada6b7f";
// const newsApiUrl = `https://newsapi.org/v2/top-headlines?country=us&apiKey=${newsApi}`;

// // NewsCard Component
// const NewsCard = ({ article }) => {
//   return (
//     <div className="bg-white shadow-lg rounded-lg overflow-hidden hover:shadow-xl transition-shadow duration-300">
//       <Image
//         src={article.urlToImage || "/default-image.jpg"}
//         alt={article.title}
//         width={400}
//         height={250}
//         className="w-full h-48 object-cover"
//         unoptimized={true}
//       />
//       <div className="p-4">
//         <h3 className="text-xl font-semibold text-gray-800 truncate">{article.title}</h3>
//         <p className="text-gray-600 text-sm mt-2">{article.description}</p>
//         <p className="text-gray-500 text-xs mt-2 line-clamp-3">{article.content}</p>
//       </div>
//     </div>
//   );
// };

// // Navbar Component
// const Navbar = ({ categories, setCategory }) => {
//   return (
//     <div className="flex flex-wrap justify-center items-center gap-4 my-8">
//       {categories.map((cat) => (
//         <button
//           key={cat}
//           className={`${
//             cat === setCategory
//               ? "bg-blue-500 text-white"
//               : "bg-gray-200 text-gray-800 hover:bg-gray-300"
//           } px-4 py-2 rounded-md text-sm font-medium transition-all duration-300`}
//           onClick={() => setCategory(cat)}
//         >
//           {cat}
//         </button>
//       ))}
//     </div>
//   );
// };

// // Main Page Component
// const Page = () => {
//   const [news, setNews] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [category, setCategory] = useState("all");
//   const categories = ["all", "business", "sports", "technology"]; // Categories array

//   useEffect(() => {
//     const query = category === "all" ? "" : `&category=${category}`;
//     fetch(newsApiUrl + query)
//       .then((response) => response.json())
//       .then((data) => {
//         setNews(data.articles || []);
//         setLoading(false);
//       })
//       .catch((error) => {
//         console.error(error);
//         setLoading(false);
//       });
//   }, [category]);

//   return (
//     <>
//       <Head>
//         <title>News App</title>
//         <meta name="description" content="A news app built with Next.js and Tailwind CSS" />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>

//       <main className="max-w-screen-lg mx-auto p-4">
//         <h1 className="text-3xl font-bold text-center my-6">News App</h1>
//         <Navbar categories={categories} setCategory={setCategory} />
        
//         <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
//           {loading ? (
//             <p className="col-span-full text-center text-xl">Loading...</p>
//           ) : news && news.length > 0 ? (
//             news.map((article) => (
//               <Link href={article.url} key={article.url}>
//                   <NewsCard article={article} />
//               </Link>
//             ))
//           ) : (
//             <p className="col-span-full text-center text-xl">No news found</p>
//           )}
//         </div>
//       </main>
//     </>
//   );
// };

// export default Page;

 
"use client";
import React, { useState, useEffect } from "react";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";

// News API Configuration
const newsApi = "804b5ac5eb154a81ad4dc4b10ada6b7f";
const newsApiUrl = `https://newsapi.org/v2/top-headlines?country=us&apiKey=${newsApi}`;

// NewsCard Component
const NewsCard = ({ article }) => {
  return (
    <div className="bg-white shadow-xl rounded-lg overflow-hidden hover:shadow-2xl transition-shadow duration-300 transform hover:scale-105">
      <Image
        src={article.urlToImage || "/default-image.jpg"}
        alt={article.title}
        width={400}
        height={250}
        className="w-full h-48 object-cover"
        unoptimized={true}
      />
      <div className="p-4">
        <h3 className="text-xl font-semibold text-gray-800 truncate">{article.title}</h3>
        <p className="text-gray-600 text-sm mt-2">{article.description}</p>
        <p className="text-gray-500 text-xs mt-2 line-clamp-3">{article.content}</p>
      </div>
    </div>
  );
};

// Navbar Component
const Navbar = ({ categories, setCategory }) => {
  return (
    <div className="flex flex-wrap justify-center items-center gap-4 my-8">
      {categories.map((cat) => (
        <button
          key={cat}
          className={`${
            cat === setCategory
              ? "bg-blue-900 text-white"
              : "bg-gray-200 text-gray-800 hover:bg-gray-300"
          } px-4 py-2 rounded-md text-sm font-medium transition-all duration-300`}
          onClick={() => setCategory(cat)}
        >
          {cat}
        </button>
      ))}
    </div>
  );
};

// Main Page Component
const Page = () => {
  const [news, setNews] = useState([]);
  const [loading, setLoading] = useState(true);
  const [category, setCategory] = useState("all");
  const [searchTerm, setSearchTerm] = useState("");
  const [page, setPage] = useState(1);
  const [totalResults, setTotalResults] = useState(0); // To store the total number of news articles
  const categories = ["all", "business", "sports", "technology"];

  const fetchNews = () => {
    const query = category === "all" ? "" : `&category=${category}`;
    const searchQuery = searchTerm ? `&q=${searchTerm}` : "";
    const paginatedQuery = `&page=${page}&pageSize=10`;

    fetch(newsApiUrl + query + searchQuery + paginatedQuery)
      .then((response) => response.json())
      .then((data) => {
        setNews(data.articles || []);
        setTotalResults(data.totalResults || 0); // Update the total number of results
        setLoading(false);
      })
      .catch((error) => {
        console.error(error);
        setLoading(false);
      });
  };

  useEffect(() => {
    fetchNews();
  }, [category, searchTerm, page]);

  const totalPages = Math.ceil(totalResults / 10); // Calculate total number of pages

  return (
    <>
      <Head>
        <title>News App</title>
        <meta name="description" content="A news app built with Next.js and Tailwind CSS" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="max-w-screen-xl mx-auto p-6">
        <h1 className="text-4xl font-bold text-center text-blue-900 my-8">News App</h1>
        
        <div className="flex justify-between items-center mb-6">
          <Navbar categories={categories} setCategory={setCategory} />

          <input
            type="text"
            placeholder="Search news..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="p-2 border border-gray-300 rounded-md w-1/3"
          />
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
          {loading ? (
            <p className="col-span-full text-center text-xl">Loading...</p>
          ) : news.length > 0 ? (
            news.map((article) => (
              <Link href={article.url} key={article.url}>
                <NewsCard article={article} />
              </Link>
            ))
          ) : (
            <p className="col-span-full text-center text-xl">No news found</p>
          )}
        </div>

        {/* Pagination Controls */}
        <div className="flex justify-center items-center mt-8">
          <button
            onClick={() => setPage((prev) => Math.max(prev - 1, 1))}
            className="px-4 py-2 bg-blue-900 text-white rounded-md mx-2 disabled:opacity-50"
            disabled={page === 1}
          >
            Previous
          </button>

          {/* Page Number Buttons */}
          <div className="flex items-center gap-2">
            {[...Array(totalPages)].map((_, index) => (
              <button
                key={index}
                onClick={() => setPage(index + 1)}
                className={`px-4 py-2 border rounded-md ${
                  page === index + 1
                    ? "bg-blue-900 text-white"
                    : "bg-gray-200 text-gray-800 hover:bg-gray-300"
                }`}
              >
                {index + 1}
              </button>
            ))}
          </div>

          <button
            onClick={() => setPage((prev) => Math.min(prev + 1, totalPages))}
            className="px-4 py-2 bg-blue-900 text-white rounded-md mx-2"
            disabled={page === totalPages}
          >
            Next
          </button>
        </div>
      </main>
    </>
  );
};

export default Page;

 

import { useState } from "react";
import Weather from "./Weather";
import SunriseSunset from "./SunriseSunset";
import WindSpeed from "./WindSpeed";
import HourlyWeather from "./HourlyWeather";
import FeelsLike from "./FeelsLike";
import HumidityInfo from "./HumidityInfo";
import Visibility from "./Visibility";
 


import { useState } from "react";
import Weather from "./Weather";
import SunriseSunset from "./SunriseSunset";
import WindSpeed from "./WindSpeed";
import HourlyWeather from "./HourlyWeather";
import FeelsLike from "./FeelsLike";
import HumidityInfo from "./HumidityInfo";
import Visibility from "./Visibility";
 
  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },
  };
 
  <div className="min-h-screen flex flex-col items-center justify-center bg-gray-800">
        <main className="text-center flex-1 w-full">
          <h1 className="text-4xl font-bold mb-8 mt-4 text-white">
            Welcome to the weather app
          </h1>

          <div className="flex items-center justify-center mb-8">
            <input
              type="text"
              placeholder="enter city name"
              value={city}
              onChange={(e) => setCity(e.target.value)}
              className="p-4 mr-4 bg-gray-700 text-white rounded"
            />

            <button
              className="p-4 bg-blue-500 text-white rounded cursor-pointer"
              onClick={fetchWeatherData}
            >
              Search
            </button>
          </div>

          {errorAlert && <div className="text-red-500 mb-4">{errorAlert}</div>}

          {currentWeather &&
            forecastData &&
            hourlyTemperatureData.length > 0 && (
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="md:col-span-2">
                  <Weather currentWeather={currentWeather} />
                </div>

                <div className="md:col-span-1">
                  <SunriseSunset
                    sunrise={currentWeather.sys.sunrise}
                    sunset={currentWeather.sys.sunset}
                  />
                  <WindSpeed windSpeed={currentWeather.wind.speed} />
                </div>
                <div className="md:col-span-2">
                  <HourlyWeather
                    HourlyTemperatureData={hourlyTemperatureData}
                  />
                </div>
                <div className="md:col-span-1">
                  <FeelsLike
                    actualTemperature={currentWeather.main.temp}
                    feelsLike={currentWeather.main.feels_like}
                  />
                  <HumidityInfo humadity={currentWeather.main.humadity} />
                  <Visibilty visibility={currentWeather.visibility} />
                </div>

                {/* <div className="md:col-span-2">
                  <FiveDaysGraph forecastData={forecastData}/>
                </div> */}
              </div>
            )}
        </main>
      </div>
 
// // pages/dashboard.tsx
// import Link from 'next/link';

// const Dashboard = () => {
//   return (
//     <div className="min-h-screen flex flex-col items-center justify-center bg-gray-800">
//       <h1 className="text-4xl font-bold mb-8 mt-4 text-white">Dashboard</h1>

//       <div className="flex items-center justify-center mb-8">
//         <Link href="/weather">
//           <button className="p-4 bg-blue-500 text-white rounded cursor-pointer">
//             Weather App
//           </button>
//         </Link>
//         <Link href="/news">
//           <button className="p-4 bg-blue-500 text-white rounded cursor-pointer ml-4">
//             News App
//           </button>
//         </Link>
//       </div>
//     </div>
//   );
// };

// export default Dashboard;

// import Link from 'next/link';
// import { useState, useEffect } from 'react';

// const Dashboard = () => {
//   const [isSideNavOpen, setIsSideNavOpen] = useState(false);
//   const [isDarkMode, setIsDarkMode] = useState(false);

//   // Toggle side navbar on small screens
//   const toggleSideNav = () => {
//     setIsSideNavOpen(!isSideNavOpen);
//   };

//   // Toggle dark/light mode
//   const toggleDarkMode = () => {
//     setIsDarkMode(!isDarkMode);
//   };

//   // Apply dark/light mode to the entire app
//   useEffect(() => {
//     if (isDarkMode) {
//       document.documentElement.classList.add('dark');
//     } else {
//       document.documentElement.classList.remove('dark');
//     }
//   }, [isDarkMode]);

//   return (
//     <div className="min-h-screen flex bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-900 dark:to-gray-800 transition-colors duration-500">
//       {/* Side Navbar */}
//       <div
//         className={`fixed md:relative w-64 bg-white/90 dark:bg-gray-900/90 backdrop-blur-md text-white p-4 transform ${
//           isSideNavOpen ? 'translate-x-0' : '-translate-x-full'
//         } md:translate-x-0 transition-transform duration-500 z-20 shadow-lg`}
//       >
//         <h2 className="text-2xl font-bold mb-8 text-gray-800 dark:text-white">
//           Dashboard
//         </h2>
//         <ul>
//           <li className="mb-4">
//             <Link
//               href="/weather"
//               className="text-gray-700 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-400 transition-colors duration-300"
//             >
//               Weather
//             </Link>
//           </li>
//           <li className="mb-4">
//             <Link
//               href="/news"
//               className="text-gray-700 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-400 transition-colors duration-300"
//             >
//               News
//             </Link>
//           </li>
//           {/* Add more links as needed */}
//         </ul>
//       </div>

//       {/* Main Content */}
//       <div className="flex-1 flex flex-col">
//         {/* Top Navbar */}
//         <nav className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-md p-4 text-gray-800 dark:text-white flex justify-between items-center shadow-md">
//           {/* Hamburger Menu (visible on small screens) */}
//           <button
//             onClick={toggleSideNav}
//             className="md:hidden p-2 focus:outline-none"
//           >
//             <svg
//               className="w-6 h-6 text-gray-800 dark:text-white"
//               fill="none"
//               stroke="currentColor"
//               viewBox="0 0 24 24"
//               xmlns="http://www.w3.org/2000/svg"
//             >
//               <path
//                 strokeLinecap="round"
//                 strokeLinejoin="round"
//                 strokeWidth="2"
//                 d="M4 6h16M4 12h16m-7 6h7"
//               ></path>
//             </svg>
//           </button>

//           {/* Dark/Light Mode Toggle */}
//           <button
//             onClick={toggleDarkMode}
//             className="p-2 focus:outline-none"
//           >
//             {isDarkMode ? (
//               <svg
//                 className="w-6 h-6 text-yellow-400"
//                 fill="none"
//                 stroke="currentColor"
//                 viewBox="0 0 24 24"
//                 xmlns="http://www.w3.org/2000/svg"
//               >
//                 <path
//                   strokeLinecap="round"
//                   strokeLinejoin="round"
//                   strokeWidth="2"
//                   d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
//                 ></path>
//               </svg>
//             ) : (
//               <svg
//                 className="w-6 h-6 text-gray-800 dark:text-white"
//                 fill="none"
//                 stroke="currentColor"
//                 viewBox="0 0 24 24"
//                 xmlns="http://www.w3.org/2000/svg"
//               >
//                 <path
//                   strokeLinecap="round"
//                   strokeLinejoin="round"
//                   strokeWidth="2"
//                   d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
//                 ></path>
//               </svg>
//             )}
//           </button>
//         </nav>

//         {/* Centered Cards */}
//         <div className="flex-1 flex items-center justify-center p-8">
//           <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
//             {/* Weather Card */}
//             <Link href="/weather">
//               <div className="bg-white/90 dark:bg-gray-800/90 backdrop-blur-md p-8 rounded-2xl shadow-lg cursor-pointer hover:scale-105 hover:shadow-2xl transition-all duration-500 border border-white/20 dark:border-gray-700/20">
//                 <h2 className="text-3xl font-bold mb-4 text-gray-800 dark:text-white">
//                   Weather
//                 </h2>
//                 <p className="text-gray-600 dark:text-gray-300">
//                   Check the latest weather updates.
//                 </p>
//               </div>
//             </Link>

//             {/* News Card */}
//             <Link href="/news">
//               <div className="bg-white/90 dark:bg-gray-800/90 backdrop-blur-md p-8 rounded-2xl shadow-lg cursor-pointer hover:scale-105 hover:shadow-2xl transition-all duration-500 border border-white/20 dark:border-gray-700/20">
//                 <h2 className="text-3xl font-bold mb-4 text-gray-800 dark:text-white">
//                   News
//                 </h2>
//                 <p className="text-gray-600 dark:text-gray-300">
//                   Stay updated with the latest news.
//                 </p>
//               </div>
//             </Link>
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default Dashboard;

// import Link from "next/link";
// import { useState } from "react";

// const Dashboard = () => {
//   const [isSideNavOpen, setIsSideNavOpen] = useState(false);

//   // Toggle side navbar on small screens
//   const toggleSideNav = () => {
//     setIsSideNavOpen(!isSideNavOpen);
//   };

//   return (
//     <div className="min-h-screen flex bg-gradient-to-br from-blue-50 to-purple-50">
//       {/* Side Navbar */}
//       <div
//         className={`fixed md:relative w-64 bg-white/90 backdrop-blur-md p-4 transform ${
//           isSideNavOpen ? "translate-x-0" : "-translate-x-full"
//         } md:translate-x-0 transition-transform duration-500 z-20 shadow-2xl`}
//       >
//         <h2 className="text-2xl font-bold mb-8 text-gray-800 flex items-center">
//           <svg
//             className="w-8 h-8 mr-2 text-purple-600"
//             fill="none"
//             stroke="currentColor"
//             viewBox="0 0 24 24"
//             xmlns="http://www.w3.org/2000/svg"
//           >
//             <path
//               strokeLinecap="round"
//               strokeLinejoin="round"
//               strokeWidth="2"
//               d="M4 6h16M4 12h16m-7 6h7"
//             ></path>
//           </svg>
//           Dashboard
//         </h2>
//         <ul>
//           <li className="mb-4">
//             <Link
//               href="/weather"
//               className="text-gray-700 hover:text-purple-600 transition-colors duration-300 flex items-center"
//             >
//               <svg
//                 className="w-6 h-6 mr-2"
//                 fill="none"
//                 stroke="currentColor"
//                 viewBox="0 0 24 24"
//                 xmlns="http://www.w3.org/2000/svg"
//               >
//                 <path
//                   strokeLinecap="round"
//                   strokeLinejoin="round"
//                   strokeWidth="2"
//                   d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
//                 ></path>
//               </svg>
//               Weather
//             </Link>
//           </li>
//           <li className="mb-4">
//             <Link
//               href="/news"
//               className="text-gray-700 hover:text-purple-600 transition-colors duration-300 flex items-center"
//             >
//               <svg
//                 className="w-6 h-6 mr-2"
//                 fill="none"
//                 stroke="currentColor"
//                 viewBox="0 0 24 24"
//                 xmlns="http://www.w3.org/2000/svg"
//               >
//                 <path
//                   strokeLinecap="round"
//                   strokeLinejoin="round"
//                   strokeWidth="2"
//                   d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"
//                 ></path>
//               </svg>
//               News
//             </Link>
//           </li>
//           {/* Add more links as needed */}
//         </ul>
//       </div>

//       {/* Main Content */}
//       <div className="flex-1 flex flex-col">
//         {/* Top Navbar */}
//         <nav className="bg-white/80 backdrop-blur-md p-4 text-gray-800 flex justify-between items-center shadow-md">
//           {/* Hamburger Menu (visible on small screens) */}
//           <button
//             onClick={toggleSideNav}
//             className="md:hidden p-2 focus:outline-none"
//           >
//             <svg
//               className="w-6 h-6 text-gray-800"
//               fill="none"
//               stroke="currentColor"
//               viewBox="0 0 24 24"
//               xmlns="http://www.w3.org/2000/svg"
//             >
//               <path
//                 strokeLinecap="round"
//                 strokeLinejoin="round"
//                 strokeWidth="2"
//                 d="M4 6h16M4 12h16m-7 6h7"
//               ></path>
//             </svg>
//           </button>

//           {/* User Profile Icon */}
//           <div className="flex items-center">
//             <img
//               src="https://via.placeholder.com/40"
//               alt="User"
//               className="w-10 h-10 rounded-full"
//             />
//           </div>
//         </nav>

//         {/* Centered Cards */}
//         <div className="flex-1 flex items-center justify-center p-8">
//           <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
//             {/* Weather Card */}
//             <Link href="/weather">
//               <div className="bg-white/90 backdrop-blur-md p-8 rounded-2xl shadow-lg cursor-pointer hover:scale-105 hover:shadow-2xl transition-all duration-500 border border-white/20">
//                 <h2 className="text-3xl font-bold mb-4 text-gray-800 flex items-center">
//                   <svg
//                     className="w-8 h-8 mr-2 text-blue-500"
//                     fill="none"
//                     stroke="currentColor"
//                     viewBox="0 0 24 24"
//                     xmlns="http://www.w3.org/2000/svg"
//                   >
//                     <path
//                       strokeLinecap="round"
//                       strokeLinejoin="round"
//                       strokeWidth="2"
//                       d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
//                     ></path>
//                   </svg>
//                   Weather
//                 </h2>
//                 <p className="text-gray-600 mb-4">
//                   Check the latest weather updates.
//                 </p>
//                 {/* Weather Graph */}
//                 <div className="w-full h-40 bg-gray-100 rounded-lg flex items-center justify-center overflow-hidden">
//                   <img
//                     src="images/weather.png" // Replace with your image path
//                     alt="Weather Graph"
//                     className="w-full h-full object-cover"
//                     onError={(e) => {
//                       e.target.style.display = "none"; // Hide the image if it fails to load
//                     }}
//                   />
//                 </div>
//               </div>
//             </Link>

//             {/* News Card */}
//             <Link href="/news">
//               <div className="bg-white/90 backdrop-blur-md p-8 rounded-2xl shadow-lg cursor-pointer hover:scale-105 hover:shadow-2xl transition-all duration-500 border border-white/20">
//                 <h2 className="text-3xl font-bold mb-4 text-gray-800 flex items-center">
//                   <svg
//                     className="w-8 h-8 mr-2 text-purple-500"
//                     fill="none"
//                     stroke="currentColor"
//                     viewBox="0 0 24 24"
//                     xmlns="http://www.w3.org/2000/svg"
//                   >
//                     <path
//                       strokeLinecap="round"
//                       strokeLinejoin="round"
//                       strokeWidth="2"
//                       d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"
//                     ></path>
//                   </svg>
//                   News
//                 </h2>
//                 <p className="text-gray-600 mb-4">
//                   Stay updated with the latest news.
//                 </p>
//                 {/* News Image */}
//                 <div className="w-full h-40 bg-gray-100 rounded-lg flex items-center justify-center overflow-hidden">
//                   <img
//                     src="images/news.png" // Replace with your image path
//                     alt="News"
//                     className="w-full h-full object-cover"
//                     onError={(e) => {
//                       e.target.style.display = "none"; // Hide the image if it fails to load
//                     }}
//                   />
//                 </div>
//               </div>
//             </Link>
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default Dashboard;

// pages/index.tsx







 
// // components/Layout.tsx
// import Link from "next/link";

// const Layout = ({ children }: { children: React.ReactNode }) => {
//   return (
//     <div className="min-h-screen flex bg-gradient-to-br from-blue-50 to-purple-50">
//       {/* Sidebar */}
//       <div className="fixed w-64 bg-white/90 backdrop-blur-md p-4 h-full shadow-2xl z-20">
//         <h2 className="text-2xl font-bold mb-8 text-gray-800 flex items-center">
//           Dashboard
//         </h2>
//         <ul>
//           <li className="mb-4">
//             <Link
//               href="/weather"
//               className="text-gray-700 hover:text-purple-600 transition-colors duration-300 flex items-center"
//             >
//               Weather
//             </Link>
//           </li>
//           <li className="mb-4">
//             <Link
//               href="/news"
//               className="text-gray-700 hover:text-purple-600 transition-colors duration-300 flex items-center"
//             >
//               News
//             </Link>
//           </li>
//         </ul>
//       </div>

//       {/* Main Content */}
//       <div className="flex-1 flex flex-col ml-64">
//         {/* Top Navbar */}
//         <nav className="bg-white/80 backdrop-blur-md p-4 text-gray-800 flex justify-between items-center shadow-md">
//           <div className="flex items-center">
//             <img
//               src="https://via.placeholder.com/40"
//               alt="User"
//               className="w-10 h-10 rounded-full"
//             />
//           </div>
//         </nav>

//         {/* Content Area */}
//         <div className="flex-1 p-8">{children}</div>
//       </div>
//     </div>
//   );
// };

// export default Layout;
 

import Link from "next/link";
import { useState } from "react";

const Layout = ({ children }: { children: React.ReactNode }) => {
  const [isSideNavOpen, setIsSideNavOpen] = useState(false);

  // Toggle side navbar on small screens
  const toggleSideNav = () => {
    setIsSideNavOpen(!isSideNavOpen);
  };

  return (
    <div className="min-h-screen flex bg-gradient-to-br from-blue-50 to-purple-50">
      {/* Sidebar */}
      <div
        className={`fixed md:relative w-64 bg-white/90 backdrop-blur-md p-4 h-screen shadow-2xl z-20 transform ${
          isSideNavOpen ? "translate-x-0" : "-translate-x-full"
        } md:translate-x-0 transition-transform duration-500`}
      >
        <h2 className="text-2xl font-bold mb-8 text-gray-800 flex items-center">
          <svg
            className="w-8 h-8 mr-2 text-purple-600"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M4 6h16M4 12h16m-7 6h7"
            ></path>
          </svg>
          Dashboard
        </h2>
        <ul>
          <li className="mb-4">
            <Link
              href="/weather"
              className="text-gray-700 hover:text-purple-600 transition-colors duration-300 flex items-center"
            >
              <svg
                className="w-6 h-6 mr-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
                ></path>
              </svg>
              Weather
            </Link>
          </li>
          <li className="mb-4">
            <Link
              href="/news"
              className="text-gray-700 hover:text-purple-600 transition-colors duration-300 flex items-center"
            >
              <svg
                className="w-6 h-6 mr-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"
                ></path>
              </svg>
              News
            </Link>
          </li>
        </ul>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col">
        {/* Top Navbar */}
        <nav className="bg-white/80 backdrop-blur-md p-4 text-gray-800 flex justify-between items-center shadow-md">
          {/* Hamburger Menu (visible on small screens) */}
          <button
            onClick={toggleSideNav}
            className="md:hidden p-2 focus:outline-none"
          >
            <svg
              className="w-6 h-6 text-gray-800"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M4 6h16M4 12h16m-7 6h7"
              ></path>
            </svg>
          </button>

          {/* User Profile Icon */}
          <div className="flex items-center">
            <img
              src="https://via.placeholder.com/40"
              alt="User"
              className="w-10 h-10 rounded-full"
            />
          </div>
        </nav>

        {/* Content Area */}
        <div className="flex-1 p-8">{children}</div>
      </div>
    </div>
  );
};

export default Layout;
 
flex-1 flex flex-col
 
   <nav className="bg-white/80 backdrop-blur-md p-4 text-gray-800 flex justify-between items-center shadow-md">
          {/* Hamburger Menu (visible on small screens) */}
          <button
            onClick={toggleSideNav}
            className="md:hidden p-2 focus:outline-none"
          >
            <svg
              className="w-6 h-6 text-gray-800"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M4 6h16M4 12h16m-7 6h7"
              ></path>
            </svg>
          </button>

          {/* User Profile Icon */}
          <div className="flex items-center">
            <img
              src="https://via.placeholder.com/40"
              alt="User"
              className="w-10 h-10 rounded-full"
            />
          </div>
        </nav>
 
 <div className="min-h-screen flex bg-gradient-to-br from-blue-50 to-purple-50">
      {/* Sidebar */}
      <div className="fixed w-64 bg-white/90 backdrop-blur-md p-4 h-full shadow-2xl z-20">
        <h2 className="text-2xl font-bold mb-8 text-gray-800 flex items-center">
          Dashboard
        </h2>
        <ul>
          <li className="mb-4">
            <Link
              href="/weather"
              className="text-gray-700 hover:text-purple-600 transition-colors duration-300 flex items-center"
            >
              Weather
            </Link>
          </li>
          <li className="mb-4">
            <Link
              href="/news"
              className="text-gray-700 hover:text-purple-600 transition-colors duration-300 flex items-center"
            >
              News
            </Link>
          </li>
        </ul>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col ml-64">
        {/* Top Navbar */}
        <nav className="bg-white/80 backdrop-blur-md p-4 text-gray-800 flex justify-between items-center shadow-md">
          <div className="flex items-center">
            <img
              src="https://via.placeholder.com/40"
              alt="User"
              className="w-10 h-10 rounded-full"
            />
          </div>
        </nav>

        {/* Content Area */}
        <div className="flex-1 p-8">{children}</div>
      </div>
    </div>
 
// components/Layout.tsx
import Link from "next/link";

const Layout = ({ children }: { children: React.ReactNode }) => {
  return (
    <div className="min-h-screen flex bg-gradient-to-br from-blue-50 to-purple-50">
      {/* Sidebar */}
      <div className="fixed w-64 bg-white/90 backdrop-blur-md p-4 h-full shadow-2xl z-20">
        <h2 className="text-2xl font-bold mb-8 text-gray-800 flex items-center">
          Dashboard
        </h2>
        <ul>
          <li className="mb-4">
            <Link
              href="/weather"
              className="text-gray-700 hover:text-purple-600 transition-colors duration-300 flex items-center"
            >
              Weather
            </Link>
          </li>
          <li className="mb-4">
            <Link
              href="/news"
              className="text-gray-700 hover:text-purple-600 transition-colors duration-300 flex items-center"
            >
              News
            </Link>
          </li>
        </ul>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col ml-64">
        {/* Top Navbar */}
        <nav className="bg-white/80 backdrop-blur-md p-4 text-gray-800 flex justify-between items-center shadow-md">
          <div className="flex items-center">
            <img
              src="https://via.placeholder.com/40"
              alt="User"
              className="w-10 h-10 rounded-full"
            />
          </div>
        </nav>

        {/* Content Area */}
        <div className="flex-1 p-8">{children}</div>
      </div>
    </div>
  );
};

export default Layout;

 
 {/* Sidebar */}
      <div className="fixed w-64 bg-white/90 backdrop-blur-md p-4 h-full shadow-2xl z-20">
        <h2 className="text-2xl font-bold mb-8 text-gray-800 flex items-center">
          Dashboard
        </h2>
        <ul>
          <li className="mb-4">
            <Link
              href="/weather"
              className="text-gray-700 hover:text-purple-600 transition-colors duration-300 flex items-center"
            >
              Weather
            </Link>
          </li>
          <li className="mb-4">
            <Link
              href="/news"
              className="text-gray-700 hover:text-purple-600 transition-colors duration-300 flex items-center"
            >
              News
            </Link>
          </li>
        </ul>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col ml-64">
        {/* Top Navbar */}
        <nav className="bg-white/80 backdrop-blur-md p-4 text-gray-800 flex justify-between items-center shadow-md">
          <div className="flex items-center">
            <img
              src="https://via.placeholder.com/40"
              alt="User"
              className="w-10 h-10 rounded-full"
            />
          </div>
        </nav>

        {/* Content Area */}
        <div className="flex-1 p-8">{children}</div>
      </div>
 

    <div>
      <h1 className="text-3xl font-bold mb-8">Welcome to the Dashboard</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <Link href="/weather">
            <h2 className="text-3xl font-bold mb-4 text-gray-800">Weather</h2>
            <p className="text-gray-600 mb-4">Check the latest weather updates.</p>
        </Link>

        <Link href="/news">
            <h2 className="text-3xl font-bold mb-4 text-gray-800">News</h2>
            <p className="text-gray-600 mb-4">Stay updated with the latest news.</p>
        </Link>
      </div>
    </div>
 
 <div>
      <h1 className="text-3xl font-bold mb-8">Welcome to the Dashboard</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <Link href="/weather">
            <h2 className="text-3xl font-bold mb-4 text-gray-800">Weather</h2>
            <p className="text-gray-600 mb-4">Check the latest weather updates.</p>
        </Link>

        <Link href="/news">
            <h2 className="text-3xl font-bold mb-4 text-gray-800">News</h2>
            <p className="text-gray-600 mb-4">Stay updated with the latest news.</p>
        </Link>
      </div>
 

          </a>
 

          <a className="bg-white/90 backdrop-blur-md p-8 rounded-2xl shadow-lg cursor-pointer hover:scale-105 hover:shadow-2xl transition-all duration-500 border border-white/20">
 

          </a>
 

          <a className="bg-white/90 backdrop-blur-md p-8 rounded-2xl shadow-lg cursor-pointer hover:scale-105 hover:shadow-2xl transition-all duration-500 border border-white/20">
 
../components/Layout
 
import { Provider } from "react-redux";
// import { store } from "../store";
import "../styles/globals.css";

function MyApp({ Component, pageProps }) {
  return (
    // <Provider store={store}>
      <Component {...pageProps} />
    // </Provider>
  );
}

export default MyApp;

 
</a>
 
 <a className="text-xl">
 
<a className="text-xl ml-4">
 
/weather-graph.png
 

                  <div className="text-gray-500 text-sm">Temperature Chart</div>
 

                  <div className="text-gray-500 text-sm">Breaking News</div>
 
/news-image.jpg
 
-icon.png
 
"https://via.placeholder.com/300x150?text=Breaking+News
 
  // Toggle dark/light mode
  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode);
  };

  // Apply dark/light mode to the entire app
  useEffect(() => {
    if (isDarkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [isDarkMode]);
 
// tailwind.config.js
module.exports = {
  darkMode: 'class',
    content: [
      './pages/**/*.{js,ts,jsx,tsx}',  // Pages ke andar wale files ko include karna
      './components/**/*.{js,ts,jsx,tsx}', // Components ke andar wale files ko include karna
    ],
    theme: {
      extend: {},
    },
    plugins: [],
  }
  
 
 <a className="text-lg font-semibold hover:bg-gray-700 p-2 rounded">
 
</a>
 
<a className="text-center">
 
 <a className="text-lg font-semibold hover:bg-gray-700 p-2 rounded">
 
</a>
 

                <a className="text-lg font-semibold hover:bg-gray-700 p-2 rounded">
 
</a>
 

                <a className="text-center">
 
</a>
 

                <a className="text-center">
 

                </a>
 

                <a className="text-center">
 
// "use client";
// // pages/news.tsx
// import React from "react";
// import Header from "../components/Header";
// import Navbar from "../components/Navbar";
// import TopHeadlines from "../components/TopHeadlines";
// const NewsApp = () => {
//   return (
//     <div>
//       <main className="px-2 md:px-20">
//         <Header />
//         <Navbar />
//         <section className="flex justify-between">
//           <main className="mt-4">
//             <TopHeadlines />
//           </main>
//         </section>
//       </main>
//     </div>
//   );
// };

// export default NewsApp;

// "use client";
// import React from "react";
// import { useState } from "react";
// import { useEffect } from "react";
// import Head from "next/head";
// import Image from "next/image";
// import Link from "next/link";
// // import { error } from "console";
// // 
// const newsApi = "804b5ac5eb154a81ad4dc4b10ada6b7f";
// const newsApiUrl = `https://newsapi.org/v2/top-headlines?country=us&apiKey=${newsApi}`;

// Craete a custom component
// const NewsCard = ({ article }) => {
//   return (
//     <div>
//       <Image
//         src={article.urlToImage || "./"}
//         alt={article.title}
//         width={250}
//         height={250}
//         className="w-full h-64 object-fill"
//         unoptimized={true}
//       />
//       <h3 className="text-xl font-semibold mt-4 mx-4">{article.title}</h3>
//       <p className="text-gray-500">{article.description}</p>
//       <p className="text-gray-500">{article.content}</p>
//     </div>
//   );
// };

// // navbar
// // const Navbar = ({ category, setCategory }) => {
// //   return (
// //     <div className="flex flex-wrap justify-center items-center gap-4 my-8">
// //       {category.map((cat) => (
// //         <button
// //           key={cat}
// //           className={`${
// //             category === cat
// //               ? "bg-blue-500 text-white"
// //               : "bg-gray-200 text-gray-800 hover:bg-gray-300 "
// //           } px-4 py-2 rounded-md`}
// //           onClick={() => setCategory(cat)}
// //         >
// //           {cat}
// //         </button>
// //       ))}
// //     </div>
// //   );
// // };

// const Navbar = ({ categories, setCategory }) => {
//   return (
//     <div className="flex flex-wrap justify-center items-center gap-4 my-8">
//       {categories.map((cat) => (
//         <button
//           key={cat}
//           className={`${
//             cat === setCategory // Fix comparison here
//               ? "bg-blue-500 text-white"
//               : "bg-gray-200 text-gray-800 hover:bg-gray-300 "
//           } px-4 py-2 rounded-md`}
//           onClick={() => setCategory(cat)}
//         >
//           {cat}
//         </button>
//       ))}
//     </div>
//   );
// };

// // create the main page
// // const Page = () => {
// //   const [news, setNews] = useState([]);
// //   const [loading, setLoading] = useState(true);
// //   const [category, setCategory] = useState("all");

// //   useEffect(() => {
// //     const query = category === "all" ? "" : `&category=${category}`;
// //     fetch(newsApiUrl + query)
// //       .then((response) => response.json())
// //       .then((data) => {
// //         setNews(data.articles || []);
// //         setLoading(false);
// //       })
// //       .catch((error) => {
// //         console.error(error);
// //         setLoading(false);
// //       });
// //   }, [category]);
// //   return (
// //     <>
// //       <Head>
// //         <title>News App</title>
// //         <meta
// //           name="description"
// //           content="A news app built with nextjs and taiwlind css"
// //         />
// //         <link rel="icon" href="/favicon.ico" />
// //       </Head>

// //       <main>
// //         <h1>News app</h1>
// //         <Navbar category={category} setCategory={setCategory} />
// //         <div>
// //           {loading ? (
// //             <p>Loading...</p>
// //           ) : news && news.length > 0 ? (
// //             news.map((article) => (
// //               <Link href={article.url} key={article.url}>
// //                 <NewsCard article={article} />
// //               </Link>
// //             ))
// //           ) : (
// //             <p>No news found</p>
// //           )}
// //         </div>
// //       </main>
// //     </>
// //   );
// // };

// const Page = () => {
//   const [news, setNews] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [category, setCategory] = useState("all");
//   const categories = ["all", "business", "sports", "technology"]; // Categories array

//   useEffect(() => {
//     const query = category === "all" ? "" : `&category=${category}`;
//     fetch(newsApiUrl + query)
//       .then((response) => response.json())
//       .then((data) => {
//         setNews(data.articles || []);
//         setLoading(false);
//       })
//       .catch((error) => {
//         console.error(error);
//         setLoading(false);
//       });
//   }, [category]);

//   return (
//     <>
//       <Head>
//         <title>News App</title>
//         <meta
//           name="description"
//           content="A news app built with nextjs and taiwlind css"
//         />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>

//       <main>
//         <h1>News app</h1>
//         <Navbar categories={categories} setCategory={setCategory} /> {/* Pass categories as array */}
//         <div>
//           {loading ? (
//             <p>Loading...</p>
//           ) : news && news.length > 0 ? (
//             news.map((article) => (
//               <Link href={article.url} key={article.url}>
//                 <NewsCard article={article} />
//               </Link>
//             ))
//           ) : (
//             <p>No news found</p>
//           )}
//         </div>
//       </main>
//     </>
//   );
// };

// export default Page;
// ;



// "use client";
// import React, { useState, useEffect } from "react";
// import Head from "next/head";
// import Image from "next/image";
// import Link from "next/link";

// // News API Configuration
// const newsApi = "804b5ac5eb154a81ad4dc4b10ada6b7f";
// const newsApiUrl = `https://newsapi.org/v2/top-headlines?country=us&apiKey=${newsApi}`;

// // NewsCard Component
// const NewsCard = ({ article }) => {
//   return (
//     <div className="bg-white shadow-lg rounded-lg overflow-hidden hover:shadow-xl transition-shadow duration-300">
//       <Image
//         src={article.urlToImage || "/default-image.jpg"}
//         alt={article.title}
//         width={400}
//         height={250}
//         className="w-full h-48 object-cover"
//         unoptimized={true}
//       />
//       <div className="p-4">
//         <h3 className="text-xl font-semibold text-gray-800 truncate">{article.title}</h3>
//         <p className="text-gray-600 text-sm mt-2">{article.description}</p>
//         <p className="text-gray-500 text-xs mt-2 line-clamp-3">{article.content}</p>
//       </div>
//     </div>
//   );
// };

// // Navbar Component
// const Navbar = ({ categories, setCategory }) => {
//   return (
//     <div className="flex flex-wrap justify-center items-center gap-4 my-8">
//       {categories.map((cat) => (
//         <button
//           key={cat}
//           className={`${
//             cat === setCategory
//               ? "bg-blue-500 text-white"
//               : "bg-gray-200 text-gray-800 hover:bg-gray-300"
//           } px-4 py-2 rounded-md text-sm font-medium transition-all duration-300`}
//           onClick={() => setCategory(cat)}
//         >
//           {cat}
//         </button>
//       ))}
//     </div>
//   );
// };

// // Main Page Component
// const Page = () => {
//   const [news, setNews] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [category, setCategory] = useState("all");
//   const categories = ["all", "business", "sports", "technology"]; // Categories array

//   useEffect(() => {
//     const query = category === "all" ? "" : `&category=${category}`;
//     fetch(newsApiUrl + query)
//       .then((response) => response.json())
//       .then((data) => {
//         setNews(data.articles || []);
//         setLoading(false);
//       })
//       .catch((error) => {
//         console.error(error);
//         setLoading(false);
//       });
//   }, [category]);

//   return (
//     <>
//       <Head>
//         <title>News App</title>
//         <meta name="description" content="A news app built with Next.js and Tailwind CSS" />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>

//       <main className="max-w-screen-lg mx-auto p-4">
//         <h1 className="text-3xl font-bold text-center my-6">News App</h1>
//         <Navbar categories={categories} setCategory={setCategory} />
        
//         <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
//           {loading ? (
//             <p className="col-span-full text-center text-xl">Loading...</p>
//           ) : news && news.length > 0 ? (
//             news.map((article) => (
//               <Link href={article.url} key={article.url}>
//                   <NewsCard article={article} />
//               </Link>
//             ))
//           ) : (
//             <p className="col-span-full text-center text-xl">No news found</p>
//           )}
//         </div>
//       </main>
//     </>
//   );
// };

// export default Page;

 

                </a>
 

                <a>
 
news.map((article) => (
 
stylesheet
 
{ removeDuplicateData } from '@/utils
 
Article from '@/components/Article'
 
{ getNewsSearch } from '@/api
 
process.env.API_TOKEN_NEWS
 
process.env.API_TOKEN_NEWS
 
 process.env.NEWS_API_KEY
 
import { news } from "@/types"

export const removeDuplicateData = (articles:any) => {
  const randomArticle:news[] = articles?.articles
  const filterArticles = randomArticle.filter(article => article?.source.id !== null)
  return filterArticles
}
 
import { getNewsSearch } from '@/api'
import Article from '@/components/Article'
import { removeDuplicateData } from '@/utils'

const World =async  () => {
  const newsWorld = await getNewsSearch("world")
  const filterArticles = removeDuplicateData(newsWorld)

  return (
    <div className='w-[700px]'>
      {filterArticles.map((article,idx) => (
        <div key={`${article?.title}-${idx}`}>
          <Article data={article} />
        </div>
      ))}
    </div>
  )
}

export default World
 
import { getNewsSearch } from '@/api'
import Article from '@/components/Article'
import { removeDuplicateData } from '@/utils'

const Sports = async () => {
  const newsWorld = await getNewsSearch("sports")
  const filterArticles = removeDuplicateData(newsWorld)

  return (
    <div className='w-[700px]'>
      {filterArticles.map((article,idx) => (
        <div key={`${article?.title}-${idx}`}>
          <Article data={article} />
        </div>
      ))}
    </div>
  )
}

export default Sports
 
import { getNewsSearch } from '@/api'
import Article from '@/components/Article'
import { removeDuplicateData } from '@/utils'

const Science = async () => {
  const newsWorld = await getNewsSearch("science")
  const filterArticles = removeDuplicateData(newsWorld)

  return (
    <div className='w-[700px]'>
      {filterArticles.map((article,idx) => (
        <div key={`${article?.title}-${idx}`}>
          <Article data={article} />
        </div>
      ))}
    </div>
  )
}

export default Science
 
import { getNewsSearch } from '@/api'
import Article from '@/components/Article'
import { removeDuplicateData } from '@/utils'

const Indonesia = async () => {
  const newsWorld = await getNewsSearch("indonesia")
  const filterArticles = removeDuplicateData(newsWorld)

  return (
    <div className='w-[700px]'>
      {filterArticles.map((article,idx) => (
        <div key={`${article?.title}-${idx}`}>
          <Article data={article} />
        </div>
      ))}
    </div>
  )
}

export default Indonesia
 
import { getNewsSearch } from '@/api'
import Article from '@/components/Article'
import { removeDuplicateData } from '@/utils'

const Business = async () => {
  const newsWorld = await getNewsSearch("business")
  const filterArticles = removeDuplicateData(newsWorld)

  return (
    <div className='w-[700px]'>
      {filterArticles.map((article,idx) => (
        <div key={`${article?.title}-${idx}`}>
          <Article data={article} />
        </div>
      ))}
    </div>
  )
}

export default Business
 
"use client";
import { NextPage } from 'next';

interface ErrorProps {
  statusCode: number;
}

const ErrorPage: NextPage<ErrorProps> = ({ statusCode }) => {
  return (
    <div>
      {statusCode
        ? `An error ${statusCode} occurred on server`
        : 'An error occurred on client'}
    </div>
  );
};

ErrorPage.getInitialProps = async ({ res, err }) => {
  const statusCode = res ? res.statusCode : err ? err.statusCode : 404;
  return { statusCode };
};

export default ErrorPage;

 
import { getNewsTopHeadlines } from '../pages/api'
import { removeDuplicateData } from '../utils'
import Article from './Article'

const TopHeadlines = async () => {
  const newsTop = await getNewsTopHeadlines()
  const filterArticles = removeDuplicateData(newsTop)

  return (
    <div className='w-[700px]'>
      {filterArticles.map((article,idx) => (
        <div key={`${article?.title}-${idx}`}>
          <Article data={article} />
        </div>
      ))}
    </div>
  )
}

export default TopHeadlines
 
import { getNewsSearch } from '@/api'
import RandomArticle from './RandomArticle'
import { removeDuplicateData } from '@/utils'

const RandomNews = async () => {
  const randomNews = await getNewsSearch("random news")
  const filterArticles = removeDuplicateData(randomNews)


  return (
    <div className='mt-4 w-[450px] border-l border-gray-300'>
      <h1 className="pl-2 text-2xl font-fold underline">Random News</h1>
      {filterArticles.map((article, idx) => (
        <div key={`${article?.title}-${idx}`}>
          <RandomArticle data={article} />
        </div>
      ))}
    </div>
  )
}

export default RandomNews
 
{ removeDuplicateData } from '@/utils'
 
